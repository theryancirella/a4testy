{"version":3,"sources":["logo.svg","Itemlist.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Itemlist","props","state","items","fetch","then","res","json","setState","e","userText","document","getElementById","newItem","value","method","body","JSON","stringify","dream","headers","response","getItems","this","item","console","log","deleteItem","_id","editItem","id","newEdit","logout","name","type","maxlength","required","placeholder","onClick","addItem","class","map","key","modifyItem","logoutButton","Component","Login","userField","querySelector","passField","username","password","users","length","window","alert","className","for","userCreate","userLogin","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.198aeb86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Itemlist extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            items: []\r\n        }\r\n    }\r\n\r\n    async getItems() {\r\n        fetch('/items')\r\n            .then(res => res.json())\r\n            .then(items => this.setState({ items: items }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('/items')\r\n            .then(res => res.json())\r\n            .then(items => this.setState({ items }));\r\n    }\r\n\r\n    async addItem(e) {\r\n        const userText = document.getElementById(\"userInput\")\r\n        let newItem = userText.value;\r\n        //let user = \"testuser\"; //this will be the user's username\r\n\r\n        fetch(\"/addItem\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ dream: newItem }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => this.getItems())\r\n        // reset form\r\n        userText.value = \"\";\r\n        this.getItems()\r\n    }\r\n\r\n    async modifyItem(item) {\r\n        console.log(item)\r\n        const userText = document.getElementById(\"userInput\")\r\n        if (userText.value === \"\") {\r\n            this.deleteItem(item._id);\r\n        }\r\n        else {\r\n            this.editItem(item._id);\r\n        }\r\n        this.getItems()\r\n    }\r\n\r\n    async editItem(id) {\r\n        const userText = document.getElementById(\"userInput\")\r\n        let newEdit = userText.value;\r\n\r\n        fetch(\"/edit\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ dream: newEdit, id }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(json => this.getItems());\r\n        this.getItems()\r\n    }\r\n\r\n    async deleteItem(id) {\r\n        fetch(\"/delete\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ id }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(json => this.getItems());\r\n        this.getItems()\r\n    }\r\n\r\n    logoutButton() {\r\n        const userText = document.getElementById(\"userInput\")\r\n        fetch(\"/logout\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ logout: userText.value }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n    }\r\n\r\n    //{this.state.items.map(item => <div key={item._id}>{item.dream}</div>)}\r\n    render() {\r\n        return (\r\n            <div>\r\n                <body>\r\n                    <header>\r\n                        <h1>Virtual Shopping List</h1>\r\n                    </header>\r\n                    <main>\r\n                        <label>\r\n                            New Grocery Item\r\n                                <input\r\n                                name=\"dream\"\r\n                                type=\"text\"\r\n                                id=\"userInput\"\r\n                                maxlength=\"100\"\r\n                                required\r\n                                placeholder=\"Type item here!\"\r\n                            />\r\n                        </label>\r\n                        <button type=\"submit\" id=\"submit-dream\" onClick={e => this.addItem(e)}>Add Item</button><br /><br />\r\n\r\n                        <section class=\"dreams\">\r\n                            <ul id=\"dreams\">\r\n                                {this.state.items.map(item => {\r\n                                    return <li key={item._id} onClick={e => this.modifyItem(item)}>{item.dream}</li>\r\n                                }\r\n                                )}\r\n                            </ul>\r\n                        </section>\r\n\r\n                            To edit item, enter replacement value in item box and click the list item to edit.<br />\r\n                            To remove item, click a list item to remove with nothing in the item input box.<br /><br />\r\n\r\n                        <button id=\"logout\" onClick={e => this.logoutButton()}>Logout</button>\r\n                    </main>\r\n                </body>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Itemlist","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Itemlist from './Itemlist';\r\n\r\n// main component\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  userLogin(e) {\r\n    const userField = document.querySelector(\"#username\");\r\n    const passField = document.querySelector(\"#password\");\r\n    const username = userField.value;\r\n    const password = passField.value;\r\n    console.log(\"Username: \" + username + \" Password: \" + password);\r\n    userField.value = \"\";\r\n    passField.value = \"\";\r\n\r\n    //Talk to server\r\n    fetch(\"/login\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ username, password }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    }).then(response => response.json())\r\n      .then(users => {\r\n        console.log(users)\r\n        if (users.length == 0) {\r\n          window.alert(\"Username or password is incorrect.\")\r\n        }\r\n        else {\r\n          //REDIRECT TO THE ITEMLIST GOES HERE\r\n        }\r\n      })\r\n  }\r\n\r\n  userCreate(e) {\r\n    const userField = document.querySelector(\"#username\");\r\n    const passField = document.querySelector(\"#password\");\r\n    const username = userField.value;\r\n    const password = passField.value;\r\n    console.log(\"Username: \" + username + \" Password: \" + password);\r\n    fetch(\"/create\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ username: username, password: password }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    }).then(response => response.json());\r\n    //REDIRECT TO ITEMLIST GOES HERE!!!\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Login\">\r\n        <body>\r\n          <h1>Login</h1>\r\n          <p>Enter your credentials or Create Account:</p>\r\n          <label for=\"username\" class=\"neededLabel\">Username *</label>\r\n          <input id=\"username\" type=\"text\" maxlength=\"100\" required placeholder=\"Username\"/>\r\n          <label for=\"password\" class=\"neededLabel\">Password *</label>\r\n          <input id=\"password\" type=\"text\" maxlength=\"100\" required placeholder=\"Password\"/><br />\r\n              Password should be secure and unique to your account<br /><br />\r\n              * Passwords and Usernames are case sensitive<br />\r\n            <button id=\"create-button\" onClick={e => this.userCreate(e)}>Create Account</button><br />\r\n            <button id=\"login-button\" onClick={e => this.userLogin(e)}>Login</button><br />\r\n        </body>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Itemlist from './Itemlist';\nimport Login from './Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login></Login>\n      <Itemlist></Itemlist>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}